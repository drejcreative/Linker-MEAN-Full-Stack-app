//Automaticly changing retina background
@mixin background-image-retina($file, $type) {
  background-image: url($file + '.' + $type);

  @media (-webkit-min-device-pixel-ratio: 2), (min--moz-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 2/1), (min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx) {
    & {
      background-image: url($file + '@2x.' + $type);
    }
  }
}

//usage
//
// #foo {
//   @include background-image-retina('foobar', 'png');
//   background: repeat;
// }


//Device sizes map
  $zr:         0px;
  $mi:         320px;
  $sm:         480px;
  $md:         768px;
  $lg:         1000px;
  $ex-lg:      1200px;
  $mc:         1440px;
  @mixin break-point($min-width: null,
            $max-width: null,
            $retina: null,
            $orientation: null,
            $min-height: null,
            $max-height: null,
            $media-type: screen) {

      $breakpoints: ($min-width, 'and (min-width: #{$min-width})'),
                    ($max-width, 'and (max-width: #{$max-width})'),
                    ($retina, 'and (-webkit-device-pixel-ratio: #{$retina})'),
                    ($orientation, 'and (orientation: #{$orientation})'),
                    ($min-height, 'and (min-height: #{$min-height})'),
                    ($max-height, 'and (max-height: #{$max-height})');

      $media-query: null;

      @each $bp, $mq in $breakpoints {
          @if $bp != null {
              $media-query: append($media-query, unquote($mq), space);//$media-query: append($media-query, unquote($mq), space);
          }
      }

      @media #{$media-type} #{$media-query} {
          @content;
      }
  }
  //Usage
  //
  //   // min- and max-width
  //   @include break-point(48em,64em) { background-color: #9b59b6; }
  //
  //   // min-width only
  //   @include break-point(65em) { background-color: #2ecc71; }
  //
  //   // max-height specified
  //   @include break-point($max-height: 30em) { background-color: #3498db; }
  // }
